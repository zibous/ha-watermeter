## ------------------------------------------------------------------
## WMBUS NODEMCU V3 + CC1101 for Diehl IZAR RC 868 I R4 PL
## HARDWARE:  NODEMCU V3 ESP8266 80MHz, 80KB RAM, 4MB Flash
##
## CC1101 TESTCASE FOR ALL WATERMETERS
##
## WEBUI:   http://water-meter-nmc.local
##
## ------------------------------------------------------------------
substitutions:
  ## device settings
  device_name_short: "water-meter-nmc"
  device_description: "Wasserzähler NODEMCU V3 + CUL - CC1101, IZAR module (Diehl IZAR RC 868 I R4 PL (SzczepanLeon) - all Watermeters"
  projectname: "Diehl IZAR RC 868.Watermeter"
  appversion: "3.0.0"

  ## logger settings
  log_level: "DEBUG" # not that logging need memory, so in production mode use "WARN"
  log_wmbus: "DEBUG" # Loglevel for wmbus meters component
  log_baudrate: "0" # 0 disable uart logger messages

# ----------------------------------------------------------------
# HARDWARE:  NODEMCU V3 ESP8266 80MHz, 80KB RAM, 4MB Flash
# ----------------------------------------------------------------
esp8266:
  board: nodemcuv2
  restore_from_flash: true

## ----------------------------------------------------------------
## ESPHOME APPLICATION
## ----------------------------------------------------------------
esphome:
  name: ${device_name_short}
  comment: ${device_description}
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: false
  project:
    name: ${projectname}
    version: ${appversion}
  build_path: ./build/${device_name_short}
  on_boot:
    then:
      - globals.set:
          id: boot_counter
          value: !lambda "return id(boot_counter)+=1;"
      - logger.log:
          level: INFO
          tag: "system"
          format: "BOOTMESSAGE:${device_name_short} API is connected, Device ready!"
      - component.update: bootcounter
  on_shutdown:
    then:
      - logger.log:
          level: ERROR
          tag: "system"
          format: "BOOTMESSAGE:${device_name_short} is down!"

## ------------------------------------------------------------------
## EXTERNAL COMPONENTS
## https://esphome.io/components/external_components.html
## ------------------------------------------------------------------
external_components:
  # uses the version 3 from SzczepanLeon (github)
  # https://github.com/SzczepanLeon/esphome-components
  # You can make ESPHome check the repository every time by setting this option to 0s
  - source: github://SzczepanLeon/esphome-components@version_3
    refresh: 0s
    components: [wmbus]

## ----------------------------------------------------------------
## Global variables
## ----------------------------------------------------------------
globals:
  - id: boot_counter
    type: int
    restore_value: yes
    initial_value: "0"

## ---------------------------------------------------
## WIFI Settings 3 wifis
## ---------------------------------------------------
wifi:
  id: wifi_nodemcu
  networks:
    - ssid: !secret ssid3_name
      password: !secret ssid3_pswd
      priority: 0
    - ssid: !secret ssid1_name
      password: !secret ssid1_pswd
      priority: 1
    - ssid: !secret ssid2_name
      password: !secret ssid2_pswd
      priority: 2
  domain: !secret domain

## ---------------------------------------------------
## mDNS Component
## ---------------------------------------------------
mdns:
  # if mDNS is disabled, they will no longer be able to automatically find your devices.
  disabled: false

## ---------------------------------------------------
## The captive portal component in ESPHome is a
## fallback mechanism for when connecting to the
## configured WiFi fails.
## ---------------------------------------------------
captive_portal:

## ---------------------------------------------------
## LOGGER COMPONENT
## ---------------------------------------------------
logger:
  id: appslogger
  level: ${log_level}
  baud_rate: ${log_baudrate}
  logs:
    wmbus: ${log_wmbus}
    wMBus-lib: ${log_wmbus}

## ---------------------------------------------------
## OTA COMPONENT
## ---------------------------------------------------
ota:
  password: !secret ota_pswd
  platform: esphome
  on_begin:
    then:
      - logger.log:
          format: "OTA Start"
          tag: "OTA"
          level: WARN
  on_progress:
    then:
      - logger.log:
          level: WARN
          tag: "OTA"
          format: "OTA progress %0.1f%%"
          args: ["x"]
  on_end:
    then:
      - logger.log:
          format: "OTA End"
          tag: "OTA"
          level: WARN
  on_error:
    then:
      - logger.log:
          format: "OTA update error %d"
          tag: "OTA"
          level: ERROR
          args: ["x"]

## ---------------------------------------------------
## COMPONENT WEBSERVER
## ---------------------------------------------------
web_server:
  port: 80
  version: 2
  js_url: !secret webserver_jsurl

## ---------------------------------------------------
## Home Assistant API COMPONENT
## ---------------------------------------------------
api:
  id: espapnuc
  port: 6053
  reboot_timeout: 0s

## ---------------------------------------------------
## SNTP COMPONENT
## ---------------------------------------------------
time:
  - platform: sntp
    id: time_sntp
    timezone: Europe/Berlin
    servers:
      - 0.at.pool.ntp.org
      - 0.pool.ntp.org
      - 1.pool.ntp.org

    on_time_sync:
      then:
        - logger.log:
            tag: "system"
            level: INFO
            format: "Synchronized sntp clock"

## ------------------------------------------------------------------
##           WMBUS CC1101 --> NODEMCU V3
## ------------------------------------------------------------------
##
##
##       GDO0                 MOSI
##         7              MISO  3
##         o GD02       CLK  5  o  CSN
##         |  6           4  o  |  8           ╭-------o 2 (GND)
##         |  o           o  |  |  o           |  ╭----o 1 (3.3V)
##         |  |           |  |  |  |           |  |
##   ╭――x――o――o――x――x――x――o――o――o――o――x――x――x――o――o―╮
##   |     D1 D2          D5 D6 D7 D8               |
##   |                                              |
## - | ANT              NODEMCU V3                  | -- USB
##   |                                              |
##   |                                              |
##   ╰――x――x――x――x――x――x――x――x――x――x――x――x――x――x――x―╯
##
##
##
## ------------------------------------------------------------------
wmbus:
  mosi_pin: GPIO13 #D7  3: MOSI Attached to Hardware SPI controller MOSI SPI Interface
  miso_pin: GPIO12 #D6  5: MISO Attached to Hardware SPI controller MISO SPI Interface
  clk_pin: GPIO14 #D5  4: SCK  Attached to Hardware SPI controller CLK
  cs_pin: GPIO15 #D8  8: CSN  Attached to Hardware SPI controller, Controls Boot Mode; CS SPI Interface 10k Pull-Down, boot fails if pulled high !!!
  gdo0_pin: GPIO05 #D1  7: Clock output. High Impedance !
  gdo2_pin: GPIO04 #D2  6: FIFO status signals. High Impedance !

  # log_unknown (Optional): Show telegrams from not configured meters in log. Defaults to False
  log_unknown: True

## ---------------------------------------------------
## SWITCHES
## ---------------------------------------------------
switch:
  # reset boot counter value
  - platform: template
    name: "Device Reset Boot Counter"
    turn_on_action:
      then:
        - lambda: |-
            id(boot_counter) = 0;
            id(bootcounter).publish_state(id(boot_counter));
        - logger.log:
            level: WARN
            tag: "system"
            format: "${device_name_short} reset boot counter o.k!"
        - component.update: bootcounter

  - platform: restart
    name: "Device Restart"
    id: restart_switch

  # save device boot (develop only)
  - platform: safe_mode
    name: "Device Restart (Safe Mode)"

  # reset the device to factory reset (develop only)
  - platform: factory_reset
    name: "Device Restart Factory"

## ---------------------------------------------------
## SENSORS
## ---------------------------------------------------
sensor:
  - platform: wmbus
    # Meter ID (usually from sticker). Can be specified as decimal or hex.
    # only hex is working for my watermeter !
    # see: https://github.com/SzczepanLeon/esphome-components/issues/6
    # edit watermeterid in the secrets file
    # settings to add the watermeterid to the lqi, rssi and total_water_m3
    meter_id: "0" # !secret watermeterId
    type: izar
    add_prefix: true

    # The LQI value reported by the CC1101 is a 7 bit unsigned number with a range from 0 to 127.
    # Note that a lower value indicates a better link.
    # The LQI of a received packet will be bad (higher number) when there is lot of interference.
    lqi:
      id: wmbus_cc1101_lqi
      name: "WLAN CC1101 LQI"
      entity_category: "diagnostic"
      unit_of_measurement: "lqi"

    # The RSSI value reported by the CC1101 is a 8 bit signed number with an effective
    # range from -138 dBm to -10.5 dBm when the CC1101 is operating around 868 MHz.
    # RSSI stands for received signal strength (power) indication (in dBm).
    # A higher value indicates higher power. (internal only)
    rssi:
      name: "WLAN CC1101 RSSI"
      id: wmbus_cc1101_rssi
      unit_of_measurement: "%"
      entity_category: "diagnostic"

    # waterdisplay - get the total watermter m3 from the wmbus telegram
    total_water_m3:
      name: "Watermeter Display"
      id: "waterdisplay"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: "water"
      accuracy_decimals: 3
      on_value:
        then:
          - lambda: |-
              ESP_LOGI("wmbus", "Water Display value: %f", id(waterdisplay).state);

    # water current month (wM-Bus v2.1.4)
    current_month_total_water_l:
      name: "Watermeter current month"
      id: "watermonth"
      accuracy_decimals: 2
      unit_of_measurement: "L"
      state_class: total_increasing
      device_class: "water"

    # get the last month total watermter m3 from the wmbus telegram  (wM-Bus 2.1.10)
    last_month_total_water_m3:
      name: "Water last month"
      id: "waterdisplay_lastmonth"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: "water"
      accuracy_decimals: 3
      icon: mdi:counter

    # get the battery life time (wM-Bus v2.1.4)
    remaining_battery_life_y:
      name: "Watermeter battery life"
      id: "watermeter_batterie"
      entity_category: "diagnostic"
      icon: mdi:battery

    # get the last transmit periode (wM-Bus v2.1.4)
    transmit_period_s:
      name: "Watermeter transmit periode"
      id: "watermeter_last_reading"
      entity_category: "diagnostic"
      icon: mdi:timelapse

    current_alarms:
      id: "watermeter_current_alarms"
      name: "Watermeter current alarm"
      entity_category: "diagnostic"
      icon: mdi:alarm-light

    previous_alarms:
      id: "watermeter_prev_alarms"
      name: "Watermeter previous alarm"
      entity_category: "diagnostic"
      icon: mdi:alarm-light

  # Wifi quality RSSI used by wifi_signal_db
  - platform: wifi_signal
    id: wifi_signal_db
    update_interval: 60s
    internal: true
    disabled_by_default: true

  # Wifi quality RSSI in percentage
  # Received Signal Strength (RSSI) is a measure of incoherent (raw) RF power in a channel.
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "Device WLAN RSSI"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  # device boot counter
  - platform: template
    name: Device Boot counter
    id: bootcounter
    accuracy_decimals: 0
    state_class: "measurement"
    entity_category: "diagnostic"
    lambda: return (id(boot_counter));
